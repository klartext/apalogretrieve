From  0.9.8 to 1.0.0
--------------------
1.0.0 is the same as 2021-09-12.
Updated the stuff to compile with OCaml 4.12
and also added the time-comparison.


From 0.9.6_4 t0 0.9.8
---------------------
Building with OCamlMakefile.
Code changed, so that it compiles with OCaml 4.10.0.



From 0.9.6 to 0.9.6_4
---------------------

- Renaming one command (was a misnomer,
  if we want to stick to the SQL, even if
  normal language would not see a problem here).

  Changed "GROUP" to "ORDER".
  It was a misnomer of the command, which
  I found during my autodidactic SQL-revision.

  You should your scripts change in the way that
  you use "order by" instead of "group by".
  Because this may be annoying, I have not removed
  the "group by" parse. So, your scripts will be
  useful nevertheless. It's planned to remove
  the "group by"-parse in version 1.0.
  So you have some time to change your habits.
  (Do you have ever used that statement?
  There was no feedback on the bug...)

- Lexer and Parser now corrected.
  The old one did not worked correct in all cases.


From 0.9.6 to 0.9.6_2
---------------------

- LaTeX-Quoting completed (from textstring to LaTeX)

- removed an unnecessary output in the align-formatted output,
  which was only used as a reminder during development.




From 0.9.4 to 0.9.6
-------------------

- corrected an error in the documentation and logscanner and language-parser:

    The apalog did not used the common logfile format, but instead used
    the combined logfile format, which is very common, but the name was
    wrong.  I also had ommitted the logname (lname) and user (userid)
    fields in the combined logfile format so far. I looked for common
    logformat, grabbing it out of the combined log format.  The two items
    logname and userid are very uncommon and not reliable, so I didn't
    used them.

    NOW the Combined Logfile Format is parsed completely, even with these
    both (lname, user) entries (which you seldom will use, I think).


- reading from gzip'ed logfiles is transparently possible now

- redirecting output to a file with:
                                       output = "filename.logextract" ;
         or explained more abstract:   output = <filename> ;

  REMARK: I found an "OUTPUT TO" clause in one SQL-dialect, but it seemed
  not to be SQL-standard, so I decided to use a different way here.

- changing output-format
                         with:         format = align ;
                      or with:         format = html ;
                      or with:         format = latex ;
                      or with:         format = default ;




From 0.9.2 to 0.9.4
-------------------

- Implemented GROUP BY

- catch exception of logfile-reading, for example, when logfile does not exist.
  So, now if you have a typo in your logfile name this does not end apalog and
  you can go ahead with the REPL.

- Startup-Message: programname and version printed (stdout).
- a littlebid more documentation: an overview in design.pdf
- dead code removed
- more comments




From 0.9 to 0.9.2
-----------------

It was already intended only to read that records of the logfile,
that are matching the query, when using a WHERE-condition.
I really had forgotten this behaviour.
This is now implemented, and therefore you should be able to read
huge logfiles without slurping the stuff into the RAM.

(The opposite is not implemented (and was not intended):
 reading all records into RAM and then
 make the queries on the datastructures. If this might be of interest to you,
 please let me know. It might be a speedup in queries (but you will
 possibly need huge ressources of RAM).)


 Feedback
==========

Feedback is welcome.
You can mail me: oliver@first.in-berlin.de

__END__
